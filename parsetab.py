
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTnonassocEQNEQGTGETLTLETleftBORleftBXORleftBANDleftBRSHIFTBLSHIFTleftPLUSMINUSleftTIMESDIVIDESMODSrightBNOTNEGATIVEleftEXPNAME TYPE INT FLOAT BOOL PLUS MINUS TIMES DIVIDES MODS EXP BRSHIFT BLSHIFT BXOR BOR BAND BNOT OR AND NOT EQ NEQ GT GET LT LET LP RP COLON SEMICOLON ASSIGN END WHILE IF ELIF ELSE BREAK CONTINUE READ WRITE\n    block : block sentence\n    \n    block :\n    \n    sentence : declare SEMICOLON\n    | assign SEMICOLON\n    | control SEMICOLON\n    | read SEMICOLON\n    | write SEMICOLON\n    \n    declare : TYPE NAME\n    \n    declare : TYPE NAME ASSIGN expr\n    \n    assign : NAME ASSIGN expr\n    \n    control : while\n    | if\n    \n    control : BREAK\n    | CONTINUE\n    \n    while : WHILE LP expr RP COLON block END\n    \n    if : IF LP expr RP COLON block elif else END\n    \n    elif : elif ELIF LP expr RP COLON block\n    \n    elif :\n    \n    else : ELSE COLON block\n    \n    else :\n    \n    aexpr : aexpr BOR aexpr\n    | aexpr BXOR aexpr\n    | aexpr BAND aexpr\n    | aexpr BRSHIFT aexpr\n    | aexpr BLSHIFT aexpr\n    \n    aexpr : aexpr PLUS aexpr\n    | aexpr MINUS aexpr\n    | aexpr TIMES aexpr\n    | aexpr MODS aexpr\n    | aexpr DIVIDES aexpr\n    | aexpr EXP aexpr\n    \n    aexpr : MINUS aexpr %prec NEGATIVE\n    \n    aexpr : BNOT aexpr\n    \n    aexpr : LP aexpr RP\n    \n    aexpr : TYPE LP aexpr RP\n    \n    aexpr : INT\n    | FLOAT\n    | BOOL\n    | NAME\n    \n    expr : expr OR expr\n    | expr AND expr\n    \n    expr :  aexpr EQ aexpr\n    | aexpr NEQ aexpr\n    | aexpr GT aexpr\n    | aexpr GET aexpr\n    | aexpr LT aexpr\n    | aexpr LET aexpr\n    \n    expr : NOT expr\n    \n    expr : aexpr\n    \n    read : READ NAME\n    \n    write : WRITE expr\n    '
    
_lr_action_items = {'ELIF':([3,18,21,22,36,38,93,95,97,107,108,],[-1,-5,-7,-6,-4,-3,-2,-18,98,-2,-17,]),'READ':([0,1,3,18,21,22,36,38,91,93,94,95,103,105,107,108,],[-2,4,-1,-5,-7,-6,-4,-3,-2,-2,4,4,-2,4,-2,4,]),'BOR':([25,27,28,29,31,40,41,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,92,],[47,-38,-39,-36,-37,-33,-32,47,47,-30,-31,47,-22,-21,-25,-24,-23,47,-29,47,-27,-26,-28,47,47,-34,47,-35,]),'WHILE':([0,1,3,18,21,22,36,38,91,93,94,95,103,105,107,108,],[-2,5,-1,-5,-7,-6,-4,-3,-2,-2,5,5,-2,5,-2,5,]),'COLON':([67,89,100,106,],[91,93,103,107,]),'BNOT':([9,20,23,24,26,32,34,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,63,66,101,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'EXP':([25,27,28,29,31,40,41,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,92,],[44,-38,-39,-36,-37,44,44,44,44,44,-31,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-34,44,-35,]),'MINUS':([9,20,23,24,25,26,27,28,29,31,32,34,35,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,92,101,],[24,24,24,24,54,24,-38,-39,-36,-37,24,24,24,-33,-32,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,54,24,24,24,24,54,-30,-31,54,54,54,54,54,54,54,-29,54,-27,-26,-28,54,54,-34,54,-35,24,]),'NEQ':([25,27,28,29,31,40,41,69,70,72,73,74,75,76,78,80,81,82,85,92,],[58,-38,-39,-36,-37,-33,-32,-30,-31,-22,-21,-25,-24,-23,-29,-27,-26,-28,-34,-35,]),'MODS':([25,27,28,29,31,40,41,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,92,],[52,-38,-39,-36,-37,-33,-32,52,52,-30,-31,52,52,52,52,52,52,52,-29,52,52,52,-28,52,52,-34,52,-35,]),'RP':([25,27,28,29,31,39,40,41,59,62,64,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,104,],[-49,-38,-39,-36,-37,67,-33,-32,85,-48,89,-44,-30,-31,-45,-22,-21,-25,-24,-23,-46,-29,-47,-27,-26,-28,-42,-43,-34,-40,-41,92,-35,106,]),'SEMICOLON':([2,6,7,8,12,13,14,15,17,19,25,27,28,29,30,31,37,40,41,62,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,90,92,96,102,],[18,-12,21,22,36,-13,-11,-14,38,-50,-49,-38,-39,-36,-51,-37,-8,-33,-32,-48,-10,-44,-30,-31,-45,-22,-21,-25,-24,-23,-46,-29,-47,-27,-26,-28,-42,-43,-34,-40,-41,-9,-35,-15,-16,]),'GET':([25,27,28,29,31,40,41,69,70,72,73,74,75,76,78,80,81,82,85,92,],[45,-38,-39,-36,-37,-33,-32,-30,-31,-22,-21,-25,-24,-23,-29,-27,-26,-28,-34,-35,]),'BXOR':([25,27,28,29,31,40,41,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,92,],[46,-38,-39,-36,-37,-33,-32,46,46,-30,-31,46,-22,46,-25,-24,-23,46,-29,46,-27,-26,-28,46,46,-34,46,-35,]),'LT':([25,27,28,29,31,40,41,69,70,72,73,74,75,76,78,80,81,82,85,92,],[51,-38,-39,-36,-37,-33,-32,-30,-31,-22,-21,-25,-24,-23,-29,-27,-26,-28,-34,-35,]),'PLUS':([25,27,28,29,31,40,41,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,92,],[55,-38,-39,-36,-37,-33,-32,55,55,-30,-31,55,55,55,55,55,55,55,-29,55,-27,-26,-28,55,55,-34,55,-35,]),'LP':([5,9,10,20,23,24,26,32,33,34,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,63,66,98,101,],[20,26,34,26,26,26,26,26,63,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,101,26,]),'LET':([25,27,28,29,31,40,41,69,70,72,73,74,75,76,78,80,81,82,85,92,],[53,-38,-39,-36,-37,-33,-32,-30,-31,-22,-21,-25,-24,-23,-29,-27,-26,-28,-34,-35,]),'ASSIGN':([11,37,],[35,66,]),'$end':([0,1,3,18,21,22,36,38,],[-2,0,-1,-5,-7,-6,-4,-3,]),'GT':([25,27,28,29,31,40,41,69,70,72,73,74,75,76,78,80,81,82,85,92,],[42,-38,-39,-36,-37,-33,-32,-30,-31,-22,-21,-25,-24,-23,-29,-27,-26,-28,-34,-35,]),'END':([3,18,21,22,36,38,91,93,94,95,97,99,103,105,107,108,],[-1,-5,-7,-6,-4,-3,-2,-2,96,-18,-20,102,-2,-19,-2,-17,]),'BLSHIFT':([25,27,28,29,31,40,41,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,92,],[48,-38,-39,-36,-37,-33,-32,48,48,-30,-31,48,48,48,-25,-24,48,48,-29,48,-27,-26,-28,48,48,-34,48,-35,]),'ELSE':([3,18,21,22,36,38,93,95,97,107,108,],[-1,-5,-7,-6,-4,-3,-2,-18,100,-2,-17,]),'WRITE':([0,1,3,18,21,22,36,38,91,93,94,95,103,105,107,108,],[-2,9,-1,-5,-7,-6,-4,-3,-2,-2,9,9,-2,9,-2,9,]),'BAND':([25,27,28,29,31,40,41,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,92,],[50,-38,-39,-36,-37,-33,-32,50,50,-30,-31,50,50,50,-25,-24,-23,50,-29,50,-27,-26,-28,50,50,-34,50,-35,]),'TIMES':([25,27,28,29,31,40,41,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,92,],[56,-38,-39,-36,-37,-33,-32,56,56,-30,-31,56,56,56,56,56,56,56,-29,56,56,56,-28,56,56,-34,56,-35,]),'EQ':([25,27,28,29,31,40,41,69,70,72,73,74,75,76,78,80,81,82,85,92,],[57,-38,-39,-36,-37,-33,-32,-30,-31,-22,-21,-25,-24,-23,-29,-27,-26,-28,-34,-35,]),'DIVIDES':([25,27,28,29,31,40,41,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,92,],[43,-38,-39,-36,-37,-33,-32,43,43,-30,-31,43,43,43,43,43,43,43,-29,43,43,43,-28,43,43,-34,43,-35,]),'IF':([0,1,3,18,21,22,36,38,91,93,94,95,103,105,107,108,],[-2,10,-1,-5,-7,-6,-4,-3,-2,-2,10,10,-2,10,-2,10,]),'AND':([25,27,28,29,30,31,39,40,41,62,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,90,92,104,],[-49,-38,-39,-36,61,-37,61,-33,-32,-48,61,61,-44,-30,-31,-45,-22,-21,-25,-24,-23,-46,-29,-47,-27,-26,-28,-42,-43,-34,61,-41,61,-35,61,]),'NAME':([0,1,3,4,9,16,18,20,21,22,23,24,26,32,34,35,36,38,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,63,66,91,93,94,95,101,103,105,107,108,],[-2,11,-1,19,28,37,-5,28,-7,-6,28,28,28,28,28,28,-4,-3,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-2,-2,11,11,28,-2,11,-2,11,]),'INT':([9,20,23,24,26,32,34,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,63,66,101,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'FLOAT':([9,20,23,24,26,32,34,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,63,66,101,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'BRSHIFT':([25,27,28,29,31,40,41,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,92,],[49,-38,-39,-36,-37,-33,-32,49,49,-30,-31,49,49,49,-25,-24,49,49,-29,49,-27,-26,-28,49,49,-34,49,-35,]),'BREAK':([0,1,3,18,21,22,36,38,91,93,94,95,103,105,107,108,],[-2,13,-1,-5,-7,-6,-4,-3,-2,-2,13,13,-2,13,-2,13,]),'CONTINUE':([0,1,3,18,21,22,36,38,91,93,94,95,103,105,107,108,],[-2,15,-1,-5,-7,-6,-4,-3,-2,-2,15,15,-2,15,-2,15,]),'BOOL':([9,20,23,24,26,32,34,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,63,66,101,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'NOT':([9,20,32,34,35,60,61,66,101,],[32,32,32,32,32,32,32,32,32,]),'TYPE':([0,1,3,9,18,20,21,22,23,24,26,32,34,35,36,38,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,63,66,91,93,94,95,101,103,105,107,108,],[-2,16,-1,33,-5,33,-7,-6,33,33,33,33,33,33,-4,-3,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-2,-2,16,16,33,-2,16,-2,16,]),'OR':([25,27,28,29,30,31,39,40,41,62,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,90,92,104,],[-49,-38,-39,-36,60,-37,60,-33,-32,-48,60,60,-44,-30,-31,-45,-22,-21,-25,-24,-23,-46,-29,-47,-27,-26,-28,-42,-43,-34,-40,-41,60,-35,60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'control':([1,94,95,105,108,],[2,2,2,2,2,]),'elif':([95,],[97,]),'sentence':([1,94,95,105,108,],[3,3,3,3,3,]),'read':([1,94,95,105,108,],[8,8,8,8,8,]),'expr':([9,20,32,34,35,60,61,66,101,],[30,39,62,64,65,86,87,90,104,]),'declare':([1,94,95,105,108,],[17,17,17,17,17,]),'write':([1,94,95,105,108,],[7,7,7,7,7,]),'while':([1,94,95,105,108,],[14,14,14,14,14,]),'aexpr':([9,20,23,24,26,32,34,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,63,66,101,],[25,25,40,41,59,25,25,25,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,25,25,88,25,25,]),'else':([97,],[99,]),'assign':([1,94,95,105,108,],[12,12,12,12,12,]),'block':([0,91,93,103,107,],[1,94,95,105,108,]),'if':([1,94,95,105,108,],[6,6,6,6,6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> block","S'",1,None,None,None),
  ('block -> block sentence','block',2,'p_block','parser.py',83),
  ('block -> <empty>','block',0,'p_block2','parser.py',89),
  ('sentence -> declare SEMICOLON','sentence',2,'p_sentence','parser.py',95),
  ('sentence -> assign SEMICOLON','sentence',2,'p_sentence','parser.py',96),
  ('sentence -> control SEMICOLON','sentence',2,'p_sentence','parser.py',97),
  ('sentence -> read SEMICOLON','sentence',2,'p_sentence','parser.py',98),
  ('sentence -> write SEMICOLON','sentence',2,'p_sentence','parser.py',99),
  ('declare -> TYPE NAME','declare',2,'p_declare','parser.py',105),
  ('declare -> TYPE NAME ASSIGN expr','declare',4,'p_declare2','parser.py',112),
  ('assign -> NAME ASSIGN expr','assign',3,'p_assign','parser.py',122),
  ('control -> while','control',1,'p_control','parser.py',132),
  ('control -> if','control',1,'p_control','parser.py',133),
  ('control -> BREAK','control',1,'p_control2','parser.py',139),
  ('control -> CONTINUE','control',1,'p_control2','parser.py',140),
  ('while -> WHILE LP expr RP COLON block END','while',7,'p_while','parser.py',146),
  ('if -> IF LP expr RP COLON block elif else END','if',9,'p_if','parser.py',155),
  ('elif -> elif ELIF LP expr RP COLON block','elif',7,'p_elif','parser.py',164),
  ('elif -> <empty>','elif',0,'p_elif2','parser.py',173),
  ('else -> ELSE COLON block','else',3,'p_else','parser.py',179),
  ('else -> <empty>','else',0,'p_else2','parser.py',185),
  ('aexpr -> aexpr BOR aexpr','aexpr',3,'p_aexpr_b_b','parser.py',192),
  ('aexpr -> aexpr BXOR aexpr','aexpr',3,'p_aexpr_b_b','parser.py',193),
  ('aexpr -> aexpr BAND aexpr','aexpr',3,'p_aexpr_b_b','parser.py',194),
  ('aexpr -> aexpr BRSHIFT aexpr','aexpr',3,'p_aexpr_b_b','parser.py',195),
  ('aexpr -> aexpr BLSHIFT aexpr','aexpr',3,'p_aexpr_b_b','parser.py',196),
  ('aexpr -> aexpr PLUS aexpr','aexpr',3,'p_aexpr_b_n','parser.py',206),
  ('aexpr -> aexpr MINUS aexpr','aexpr',3,'p_aexpr_b_n','parser.py',207),
  ('aexpr -> aexpr TIMES aexpr','aexpr',3,'p_aexpr_b_n','parser.py',208),
  ('aexpr -> aexpr MODS aexpr','aexpr',3,'p_aexpr_b_n','parser.py',209),
  ('aexpr -> aexpr DIVIDES aexpr','aexpr',3,'p_aexpr_b_n','parser.py',210),
  ('aexpr -> aexpr EXP aexpr','aexpr',3,'p_aexpr_b_n','parser.py',211),
  ('aexpr -> MINUS aexpr','aexpr',2,'p_aexpr_u_n','parser.py',224),
  ('aexpr -> BNOT aexpr','aexpr',2,'p_aexpr_u_b','parser.py',233),
  ('aexpr -> LP aexpr RP','aexpr',3,'p_aexpr_p','parser.py',242),
  ('aexpr -> TYPE LP aexpr RP','aexpr',4,'p_aexpr_cast','parser.py',248),
  ('aexpr -> INT','aexpr',1,'p_aexpr_n','parser.py',254),
  ('aexpr -> FLOAT','aexpr',1,'p_aexpr_n','parser.py',255),
  ('aexpr -> BOOL','aexpr',1,'p_aexpr_n','parser.py',256),
  ('aexpr -> NAME','aexpr',1,'p_aexpr_n','parser.py',257),
  ('expr -> expr OR expr','expr',3,'p_expr_b_b','parser.py',266),
  ('expr -> expr AND expr','expr',3,'p_expr_b_b','parser.py',267),
  ('expr -> aexpr EQ aexpr','expr',3,'p_expr_c','parser.py',276),
  ('expr -> aexpr NEQ aexpr','expr',3,'p_expr_c','parser.py',277),
  ('expr -> aexpr GT aexpr','expr',3,'p_expr_c','parser.py',278),
  ('expr -> aexpr GET aexpr','expr',3,'p_expr_c','parser.py',279),
  ('expr -> aexpr LT aexpr','expr',3,'p_expr_c','parser.py',280),
  ('expr -> aexpr LET aexpr','expr',3,'p_expr_c','parser.py',281),
  ('expr -> NOT expr','expr',2,'p_expr_u','parser.py',290),
  ('expr -> aexpr','expr',1,'p_expr_dg','parser.py',299),
  ('read -> READ NAME','read',2,'p_read','parser.py',305),
  ('write -> WRITE expr','write',2,'p_write','parser.py',311),
]
